[
    {
        "id": "e5ba676816adcdd0",
        "type": "tab",
        "label": "Bridge section",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "50dd3aed9dcc3133",
        "type": "function",
        "z": "e5ba676816adcdd0",
        "name": "Cleaning",
        "func": "noises = msg.payload.noise;\n//noise value check\nif(!noises){\n    console.log(\"Missing noise array\");\n    return null;\n}\nif(noises.length==0){\n    console.log(\"Empty noise array\");\n    return null;\n}\nfor (i = 0; i < noises.length; i++){\n    if (noises[i] < 0) {\n        console.log(\"Invalid noise at position \" + (i+1));\n        return null;\n    }\n}\n//timestamp check\nif(!msg.timestamp){\n    console.log(\"Missing timestamp\");\n    return null; \n}\nif(msg.timestamp < 0){\n    console.log(\"Negative timestamp\");\n    return null;\n}\n//coordinate check\nif(!msg.payload.lat || !msg.payload.lon){\n    console.log(\"Missing coordinate\");\n    return null;\n}\nif(msg.payload.lat > 90 || msg.payload.lat < -90){\n    console.log(\"Invalid latitude\");\n    return null;\n}\nif(msg.payload.lon > 180 || msg.payload.lon < -180){\n    console.log(\"Invalid longitude\");\n    return null;\n}\nreturn msg;    ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 240,
        "wires": [
            [
                "a5ac3b289c758921"
            ]
        ]
    },
    {
        "id": "616704693c60b333",
        "type": "csv",
        "z": "e5ba676816adcdd0",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 450,
        "y": 420,
        "wires": [
            [
                "a5ac3b289c758921"
            ]
        ]
    },
    {
        "id": "4196f9b94bfbb20b",
        "type": "inject",
        "z": "e5ba676816adcdd0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 400,
        "wires": [
            [
                "450282114f18b311"
            ]
        ]
    },
    {
        "id": "450282114f18b311",
        "type": "file in",
        "z": "e5ba676816adcdd0",
        "name": "POI-File",
        "filename": "C:\\Users\\gibel\\IdeaProjects\\MiddlewareTech2022\\Project1-Node-Red\\POI.txt",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 240,
        "y": 480,
        "wires": [
            [
                "616704693c60b333"
            ]
        ]
    },
    {
        "id": "45cd5662ef16f4fd",
        "type": "function",
        "z": "e5ba676816adcdd0",
        "name": "Generate Rome data",
        "func": "//set threshold\nif(!context.threshold) context.threshold = 120; \n//create array for noises\nnoises = [];\n//always generate 6 noise measurements\nfor(i=0; i<6; i++){\n    noises.push(Math.random()*90 + 50);\n}\n//create message\nm = {\n    topic : \"POI\",\n    payload : {\n        lat:  41.875 + Math.random()*0.035,\n        lon:  12.466 + Math.random()*0.037,\n        noise:  noises, //set noises to be the 6 measurements or their average\n    },\n    timestamp:  Date.now()\n};\nreturn m;\n\n//receives as input the array of 6 measurements and computes the average\n//returns the average if it is under a threshold, the array itself otherwise\nfunction getNoisesOrAverage(noises){\n    //create return array\n    n = [];\n    //initialize sum and count for average\n    sum = 0;\n    count = noises.length;\n    //sum all noises (linearized)\n    noises.forEach(e => sum += Math.pow(10, e/10));\n    //compute average\n    avg = sum / count;\n    //back-conversion to logarithmic\n    avg = 10*(Math.log10(avg));\n    //return results\n    if(avg>context.threshold){\n        return noises;\n    }\n    else{\n        n.push(avg);\n        return n;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 260,
        "wires": [
            [
                "50dd3aed9dcc3133"
            ]
        ]
    },
    {
        "id": "dd02ba46497421ce",
        "type": "inject",
        "z": "e5ba676816adcdd0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 240,
        "wires": [
            [
                "45cd5662ef16f4fd"
            ]
        ]
    },
    {
        "id": "5096fb816ad92345",
        "type": "kafkajs-producer",
        "z": "e5ba676816adcdd0",
        "d": true,
        "name": "KafkaJS Input Producer",
        "client": "ddca50d356b3a3e7",
        "topic": "input",
        "advancedoptions": true,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": true,
        "x": 830,
        "y": 360,
        "wires": []
    },
    {
        "id": "c159cb74bc37f656",
        "type": "mqtt in",
        "z": "e5ba676816adcdd0",
        "name": "MQTT input",
        "topic": "gblgrlmnn/noises",
        "qos": "0",
        "datatype": "json",
        "broker": "1425cd6007df2372",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 120,
        "wires": [
            [
                "277148a447b143f8"
            ]
        ]
    },
    {
        "id": "277148a447b143f8",
        "type": "function",
        "z": "e5ba676816adcdd0",
        "name": "",
        "func": "msg.topic = 'POI';\nmsg.timestamp = msg.payload.timestamp;\nif ((typeof msg.payload.lat) == \"string\"){\n    msg.payload.lat = msg.payload.lat.replace(\",\",\".\");\n    msg.payload.lat = parseFloat(msg.payload.lat);\n}\nif ((typeof msg.payload.lon) == \"string\"){\n    msg.payload.lon = msg.payload.lon.replace(\",\",\".\");\n    msg.payload.lon = parseFloat(msg.payload.lon);\n}\nfor (let i = 0; i < msg.payload.noise.length; i++){\n    if ((typeof msg.payload.noise[i]) == \"string\"){\n        msg.payload.noise[i] = msg.payload.noise[i].replace(\",\",\".\");\n        msg.payload.noise[i] = parseFloat(msg.payload.noise[i]);\n    }\n}\nreturn  msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 180,
        "wires": [
            [
                "50dd3aed9dcc3133"
            ]
        ]
    },
    {
        "id": "774b264e7e852a9a",
        "type": "function",
        "z": "e5ba676816adcdd0",
        "d": true,
        "name": "Generate Rome data (days)",
        "func": "//just for debugging\nif(!context.timestamp) context.timestamp = 21603600000;// -60*60*1000;\ncontext.timestamp += 60 * 60 * 1000;\n\n\nnoises = [];\n\n// for(i=0; i<6; i++){\n    noises.push(Math.random()*90 + 50);\n// }\n\nm = {\n    topic : \"POI\",\n    payload : {\n        x:  41.890,\n        y:  12.492,\n        noise:  noises,\n    },\n    // timestamp:  Date.now()\n    timestamp: context.timestamp\n};\nreturn m;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 300,
        "wires": [
            [
                "50dd3aed9dcc3133"
            ]
        ]
    },
    {
        "id": "8cb2e989d87c5557",
        "type": "inject",
        "z": "e5ba676816adcdd0",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 280,
        "wires": [
            [
                "774b264e7e852a9a"
            ]
        ]
    },
    {
        "id": "303a6d86d10848ba",
        "type": "inject",
        "z": "e5ba676816adcdd0",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 320,
        "wires": [
            [
                "e84b59a816ed20e5"
            ]
        ]
    },
    {
        "id": "e84b59a816ed20e5",
        "type": "function",
        "z": "e5ba676816adcdd0",
        "d": true,
        "name": "Fake data generator",
        "func": "//create array for noises\nnoises = [125.635];\n//fabricate message\nm = {\n    topic : \"POI\",\n    payload : {\n        lat:  41.894326,\n        lon:  12.487027,\n        noise:  noises\n        // noise: []\n    },\n    // timestamp:  Date.now()\n    timestamp: 1662384060000\n};\nreturn m;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 340,
        "wires": [
            [
                "50dd3aed9dcc3133"
            ]
        ]
    },
    {
        "id": "a5ac3b289c758921",
        "type": "function",
        "z": "e5ba676816adcdd0",
        "name": "Enrichment",
        "func": "POI = context.get(\"POI\");\n\nif(msg.topic == \"POI\"){\n    noises = msg.payload.noise;\n    //obtain values to build actual message\n    poiAndDistance = getNearestPoiAndDistance(msg.payload.lat, msg.payload.lon);\n    POI = poiAndDistance[0];\n    distance = poiAndDistance[1];\n    //cleaning section (distance from closest POI)\n    //500m was reckoned a legitimate value given the POIs in the file\n    if (distance > 500){\n        // console.log(\"Discarded message after distance check\");\n        return null;\n    }\n    //send multiple noise messages in case an array\n    //of noises is received\n    for (let i = 0; i<noises.length; i++){\n        let message = {};\n        //cleaning section (negative noise or timestamp)\n        message.lat = msg.payload.lat;\n        message.lon = msg.payload.lon;\n        message.key = POI.Name;\n        message.distance = distance;\n        message.PoiLat = POI.lat;\n        message.PoiLon = POI.lon;\n        message.timestamp = msg.timestamp.toString();\n        message.timestampString = (new Date(Number(msg.timestamp))).toLocaleString(),\n        //asynchronous send otherwise kafka producer\n        //receives only the first one\n        message.payload = noises[i].toString() + \",\" + message.timestamp;\n        node.send(message);\n    }\n}\nelse{\n    setArray();\n    // console.log(context.get(\"POI\"));\n}\n\n//initializes matrix of points of interest\nfunction setArray(){\n    console.log(msg.payload);\n    context.set(\"POI\", msg.payload);\n}\n\n//returns nearest point of interest and distance from it\n//given the point coordinates (lat, lon)\nfunction getNearestPoiAndDistance(lat, lon){\n    //initialize POI as the first one and compute distance from it\n    d = computeDistance(lat, lon, POI[0]);\n    p = POI[0];\n    //for each POI compute distance and update p \n    //if d1 is lower than current distance from closest \n    //start from POI[1] because 0 has already been considered\n    for(j=1; j<POI.length; j++){\n        d1 = computeDistance(lat, lon, POI[j]);\n        if(d1<d){\n            d = d1;\n            p = POI[j];\n        }\n    }\n    //return both POI and distance because needed for cleaning\n    return [p,d];\n    \n}\n\n//compute distance in meters from a given point of interest\nfunction computeDistance(lat, lon, poi){\n    return haversine(lat, lon, poi.lat, poi.lon);\n}\n\n/*---------------------------------------------\n    MATH SECTION: COMPUTE DISTANCE BETWEEN\n    TWO POINTS, GIVEN LATITUDE AND LONGITUDE\n-----------------------------------------------*/\n\n//returns distance in meters between two points given \n//latitude and longitude, computing haversine function\n//info about haversine: https://community.esri.com/t5/coordinate-reference-systems-blog/distance-on-a-sphere-the-haversine-formula/ba-p/902128\nfunction haversine(lat1, lon1, lat2, lon2){\n    R = 6371000;  // radius of Earth in meters\n    //convert latitudes to radians\n    phi1 = degToRad(lat1);\n    phi2 = degToRad(lat2);\n    //compute differences in latitudes and longitudes\n    deltaPhi = degToRad(lat2 - lat1);\n    deltaLambda = degToRad(lon2 - lon1);\n    //actual computation of haversine\n    a = Math.sin(deltaPhi / 2.0) ** 2 + Math.cos(phi1) * Math.cos(phi2) * Math.sin(deltaLambda / 2.0) ** 2;\n    c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    meters = R * c;  // output distance in meters\n    km = meters / 1000.0  // output distance in kilometers\n    return meters;\n}\n\nfunction degToRad(angle){\n    while(angle > 360) angle -= 360;\n    while(angle < -360) angle += 360;\n    return angle * (Math.PI / 180);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 300,
        "wires": [
            [
                "5096fb816ad92345"
            ]
        ]
    },
    {
        "id": "7b9f719b3a4fd372",
        "type": "debug",
        "z": "e5ba676816adcdd0",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 220,
        "wires": []
    },
    {
        "id": "ddca50d356b3a3e7",
        "type": "kafkajs-client",
        "d": true,
        "name": "Test Client",
        "brokers": "127.0.0.1:9092",
        "clientid": "384",
        "connectiontimeout": "3000",
        "requesttimeout": "25000",
        "advancedretry": false,
        "maxretrytime": "30000",
        "initialretrytime": "300",
        "factor": "0.2",
        "multiplier": "2",
        "retries": "5",
        "auth": "none",
        "tlsselfsign": false,
        "tlscacert": "",
        "tlsclientcert": "",
        "tlsprivatekey": "",
        "tlspassphrase": "",
        "saslssl": true,
        "saslmechanism": "plain",
        "loglevel": "error"
    },
    {
        "id": "1425cd6007df2372",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt.neslab.it",
        "port": "3200",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    }
]